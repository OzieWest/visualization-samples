@using System.Configuration
@{
	ViewBag.Title = "D3.js";
}

@section style{
	<style>
		svg {
			border: 1px solid rgb(160, 160, 160);
		}

		select {
			width: 100%;
			height: 28px;
			font-size: 16px;
		}

		.post {
			fill: rgb(0, 184, 255);
		}

			.post:hover, .copy:hover {
				stroke: black;
			}

		.copy {
			fill: orange;
		}

		.col_1, .col_2, .col_3 {
			width: 80px;
		}

		.ngrs-range-slider {
			margin: 0 !important;
		}

		.nav, .pagination, .carousel, .panel-title a {
			cursor: pointer;
		}

		.node {
			stroke-width: 1.5px;
		}

		.mylink {
			stroke-width: 1px;
			fill: none;
		}
	</style>
}

@section header
{
	<h2 class="page-title">Data-Driven Documents<small> is a JavaScript library for manipulating documents based on data.</small></h2>
}

<div id="ctrlzone" ng-controller="treeController" style="display: none;">
	
	<div class="text-danger" ng-if="vkid.length == 0" style="font-size: 16px;">
		{{ vkid }} ?id=your_id
	</div>

	<div ng-if="vkid.length != 0">
		<progressbar ng-show="lock && calcWith() != 100" class="progress-striped active" value="calcWith()" type="info">loading...</progressbar>
		<button ng-hide="lock" class="btn btn-info" ng-click="loadData()">Load Info</button>
		<button ng-hide="calcWith() != 100" class="btn btn-info" ng-click="createGraph()">Create graph</button>

		<div ng-show="calcWith() == 100" class="row">
			<div class="col-sm-4">
				<h4>Ignore border:</h4>
				<div class="row" style="margin-bottom: 10px;">
					<div class="col-sm-3">
						<input type="text" ng-model="config.ignore" style="width: 80px;" />
					</div>
					<div class="col-sm-9">
						<div range-slider min="0" max="1500" model-max="config.ignore" pin-handle="min"></div>
					</div>
				</div>
			</div>
			<div class="col-sm-4">
				<h4>Dot distance:</h4>
				<div class="row" style="margin-bottom: 10px;">
					<div class="col-sm-3">
						<input type="text" ng-model="config.dist" style="width: 80px;" />
					</div>
					<div class="col-sm-9">
						<div range-slider min="10" max="50" model-max="config.dist" pin-handle="min" step="10"></div>
					</div>
				</div>
			</div>
			<div class="col-sm-4">
				<h4>Dot radius:</h4>
				<div class="row" style="margin-bottom: 10px;">
					<div class="col-sm-3">
						<input type="text" ng-model="config.rad" style="width: 80px;" />
					</div>
					<div class="col-sm-9">
						<div range-slider min="1" max="15" model-max="config.rad" pin-handle="min" step="1"></div>
					</div>
				</div>
			</div>
		</div>

		<div style="margin-top: 20px;" svgfriend></div>
	</div>
</div>

@section scripts
{
	<script src="~/mainApp/svg.vk.friends.js"></script>
	<script type="text/javascript">
		'use sctrict';

		$(document).ready(function () { $('#ctrlzone').show(); });

		var token = '@Html.Raw(ConfigurationManager.AppSettings["vkToken"])';
		mainModule.value('vk_id', '@Html.Raw(ViewBag.ID)');

		mainModule.controller('treeController', function ($scope, $timeout, vkService, show, vk_id) {
			var myfriends = [];
			var callTimer = 0;

			$scope.vkid = vk_id;

			$scope.bigdata = [];
			$scope.load = 0;
			$scope.lock = false;
			$scope.config = {
				ignore: 150,
				dist: 30,
				rad: 5,
			};

			/* Загружает список постов по ID пользователя */
			/* FRIENDS */
			$scope.getFriends = function (id) {
				if (!_.isEmpty(id)) {
					vkService.friendsGet(id, 'last_name').then(function (r) {
						myfriends = angular.copy(r);
						localforage.setItem('users', angular.copy(r));
					});
				}
			};

			$scope.calcWith = function () {
				return $scope.load / myfriends.length * 100;
			};

			$scope.loadData = function () {
				if (!$scope.lock) {
					var friends = _.map(myfriends, function (r) { return { uid: r.uid, name: r.last_name + ' ' + r.first_name }; });
					_.each(friends, function (f) {
						callTimer += 1000;
						$timeout(function () {
							vkService.friendsGet(f.uid, 'last_name').then(function (r) {
								$scope.load++;
								if (typeof r != 'undefined' && r.length != 0) {
									$scope.bigdata.push({ uid: f.uid, name: f.name, friends: r });
									console.log(f.name, r.length);
								}
							});
						}, callTimer);
					});
				}
				$scope.lock = true;
			};

			$scope.createGraph = function () {
				var data = angular.copy($scope.bigdata);
				localforage.setItem('data', data);

				// Проверяем границу дозволенности по количеству френдов
				if ($scope.config.ignore != 0) {
					_.each(data, function (d) {
						if (d.friends.length > $scope.config.ignore) {
							d.friends = [];
						}
					});
				}
				// Получаем список ID которые всречаются более одного раза, 
				// на основе него выираем нужных нам людей
				var idArray = getListIntersection(data, vk_id);
				_.each(data, function (e) {
					e.friends = _.compact(_.map(e.friends, function (f) {
						if (_.contains(idArray, f.uid))
							return f;
					}));
				});

				// Создаем граф
				graph.init(vk_id, data, $scope.config.dist, $scope.config.rad);
			};

			$scope.createTable = function () {
				var idArray = getListIntersection($scope.bigdata, vk_id);
				_.each(idArray, function (e) {

				});

				graph.init(vk_id, data, config.dist, 4);
			};

			/* Возвращает список друзей которые пересекаются */

			function getListIntersection(data, ownerId) {
				var idArray = [];
				var counter = 0;
				for (var i = 0; i < data.length; i++) {
					for (var j = counter; j < data.length; j++) {
						if (i !== j) {
							var current = _.compact(_.map(data[i].friends, function (f) {
								if (f.uid !== ownerId)
									return f.uid;
							}));
							var next = _.compact(_.map(data[j].friends, function (f) {
								if (f.uid !== ownerId)
									return f.uid;
							}));
							var d = _.filter(_.intersection(current, next), function (r) {
								if (r.uid !== ownerId)
									return r;
							});

							if (typeof d != 'undefined' && d.length != 0) {
								_.each(d, function (e) { idArray.push(e); });
							}
						}
					}
					counter++;
				}
				return _.uniq(idArray);
			}

			/* INIT */
			$scope.getFriends(vk_id);
		});
	</script>
}