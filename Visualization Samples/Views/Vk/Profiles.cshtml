@using System.Configuration
@{
	ViewBag.Title = "D3.js";
}

@section style{
	<style>
		svg {
			border: 1px solid rgb(160, 160, 160);
			width: 100%;
			height: 100%;
		}

		#vivaContainer {
			margin-top: 10px;
			width: 100%;
			height: 650px;
		}
	</style>
}

<div id="ctrlzone" style="display: none;" ng-controller="mainController">

	<div class="text-danger" ng-if="ownerid.length == 0" style="font-size: 16px;">
		?id=person_id
	</div>

	<div ng-if="ownerid.length != 0">
		<progressbar ng-show="lock && calcWith() != 100" class="progress-striped active" value="calcWith()" type="info">loading...</progressbar>
		<button ng-show="!lock && calcWith() != 100" class="btn btn-info" ng-click="loadData()">Load full data</button>

		<table ng-show="!created && calcWith() == 100" style="margin-top: 10px;" class="table table-striped table-bordered">
			<tr>
				<td>
					<button class="btn btn-info" ng-click="createGraph()">Create graph</button>
				</td>
			</tr>
		</table>
		<div id="vivaContainer"></div>
	</div>
</div>

@section scripts
{
	<script type="text/javascript">
		'use sctrict';

		var owid = '@Html.Raw(ViewBag.ID)';

		var bd = { friends: [], bigdata: [], graph: {} };

		$(document).ready(function() {
			$('#ctrlzone').show();

			if (owid.length != 0) {
				bd.graph = Viva.Graph.graph();

				var graphics = Viva.Graph.View.svgGraphics();

				var highlightRelatedNodes = function(nodeId, isOn) {
					bd.graph.forEachLinkedNode(nodeId, function(node, link) {
						var l = graphics.getLinkUI(link.id);
						if (l) {
							l.attr('stroke', isOn ? 'red' : 'gray');
						}
					});
				};

				graphics.node(function(node) {
					var ui = Viva.Graph.svg('image')
						.attr('width', 24)
						.attr('height', 24)
						.link(node.data.img);

					ui.append('title').text(node.data.name);

					$(ui).hover(function() {
						highlightRelatedNodes(node.id, true);
					}, function() {
						highlightRelatedNodes(node.id, false);
					});

					return ui;
				});

				graphics.placeNode(function(nodeUI, pos) {
					nodeUI.attr('x', pos.x - 12).attr('y', pos.y - 12);
				});

				bd.graph.addNode('target', { img: '../Content/target.png', name: 'target' });
				var renderer = Viva.Graph.View.renderer(bd.graph, {
						graphics: graphics,
						container: document.getElementById('vivaContainer')
					}
				);
				renderer.run();
			}
		});

		var token = '@Html.Raw(ConfigurationManager.AppSettings["vkToken"])';
		mainModule.value('ownerid', owid);

		mainModule.factory('sharedRepo', function(mockService) {
			var repo = {
				data: [],
				friends: []
			};

			return {
				get: function() {
					return repo;
				}
			};
		});

		mainModule.controller('mainController', ['$scope', '$timeout', 'sharedRepo', 'vkService', 'ownerid',
			function(s, t, sharedRepo, vk, ownerid) {
				var repo = sharedRepo.get(),
					callTimer = 0;

				s.ownerid = ownerid;
				s.load = 0;
				s.lock = false;
				s.created = false;

				s.getFriends = function(id) {
					if (!_.isEmpty(id)) {
						vk.friendsGet(id, 'last_name,photo').then(function(r) {
							repo.friends = angular.copy(r);

							addToGraph(repo.friends, 'target');

							bd.friends = angular.copy(r);
						});
					}
				};

				s.calcWith = function() {
					//return 100;
					return s.load / repo.friends.length * 100;
				};

				s.loadData = function() {
					if (!s.lock) {
						var data = _.map(repo.friends, function(r) { return { uid: r.uid, name: r.last_name + ' ' + r.first_name }; });
						_.each(data, function(f) {
							callTimer += 1000;
							t(function() {
								vk.friendsGet(f.uid, 'last_name,photo').then(function(r) {
									s.load++;
									if (typeof r != 'undefined' && r.length != 0) {
										repo.data.push({ uid: f.uid, name: f.name, friends: r });
										bd.bigdata.push({ uid: f.uid, name: f.name, friends: r });
									}
								});
							}, callTimer);
						});
					}
					s.lock = true;
				};

				s.createGraph = function() {
					s.created = true;
					var data = angular.copy(repo.data);

					var idArray = getListIntersection2(data, ownerid);
					_.each(data, function(e) {
						e.friends = _.compact(_.map(e.friends, function(f) {
							if (_.contains(idArray, f.uid)) return f;
						}));
					});

					console.log(data);

					_.each(data, function(e) {
						_.each(e.friends, function(f) {
							bd.graph.addNode(f.uid, { img: f.photo, name: f.last_name + ' ' + f.first_name });
							bd.graph.addLink(e.uid, f.uid);
						});
					});
				};

				function addToGraph(data, owner) {
					_.each(data, function(e) {
						bd.graph.addNode(e.uid, { img: e.photo, name: e.last_name + ' ' + e.first_name });
						bd.graph.addLink(owner, e.uid);
					});
				}

				s.getFriends(s.ownerid);
			}]);

		function getListIntersection(data, ownerId) {
			var idArray = [];
			var counter = 0;
			for (var i = 0; i < data.length; i++) {
				for (var j = counter; j < data.length; j++) {
					if (i !== j) {
						var current = _.compact(_.map(data[i].friends, function(f) {
							if (f.uid !== ownerId)
								return f.uid;
						}));
						var next = _.compact(_.map(data[j].friends, function(f) {
							if (f.uid !== ownerId)
								return f.uid;
						}));
						var d = _.filter(_.intersection(current, next), function(r) {
							if (r.uid !== ownerId)
								return r;
						});

						if (typeof d != 'undefined' && d.length != 0) {
							_.each(d, function(e) { idArray.push(e); });
						}
					}
				}
				counter++;
			}
			return _.uniq(idArray);
		}

		function getListIntersection2(data, ownerId) {
			var idArray = [];
			var counter = 0;
			for (var i = 0; i < data.length; i++) {
				var current = _.compact(_.map(data[i].friends, function(f) {
					if (f.uid !== ownerId)
						return f.uid;
				}));
				for (var j = counter; j < data.length; j++) {
					if (i !== j) {
						var result = _.find(current, function(e) {
							if (e == data[j].uid) return e;
						});

						if (typeof result != 'undefined') {
							idArray.push(result);
							idArray.push(data[i].uid);
						}
					}
				}
				counter++;
			}
			return _.uniq(idArray);
		}

	</script>
}