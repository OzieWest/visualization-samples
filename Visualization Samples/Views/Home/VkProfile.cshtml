@using System.Configuration
@{
	ViewBag.Title = "D3.js";
}

@section style{
	<style>
		svg {
			border: 1px solid rgb(160, 160, 160);
		}

		select {
			width: 100%;
			height: 28px;
			font-size: 16px;
		}

		.post {
			fill: rgb(0, 184, 255);
		}

			.post:hover, .copy:hover {
				stroke: black;
			}

		.copy {
			fill: orange;
		}

		.col_1, .col_2, .col_3 {
			width: 80px;
		}

		.ngrs-range-slider {
			margin: 0 !important;
		}

		.nav, .pagination, .carousel, .panel-title a {
			cursor: pointer;
		}

		.node {
			stroke: #fff;
			stroke-width: 1.5px;
		}

		.link {
		}
	</style>
}

@section header
{
	<h2 class="page-title">Data-Driven Documents<small> is a JavaScript library for manipulating documents based on data.</small></h2>
}

<div id="ctrlzone" ng-controller="treeController" style="display: none;">

	<progressbar class="progress-striped active" value="bigdata.length" type="info">{{ bigdata.length }}</progressbar>
	<button class="btn btn-info" ng-click="testGraph()">Load Info</button>
	<button class="btn btn-info" ng-click="createGraph()">Create graph</button>
	<div svgfriend></div>
</div>

@section scripts
{
	<script src="~/mainApp/svg.friend.graph.js"></script>
	<script type="text/javascript">
		'use sctrict';

		$(document).ready(function () { $('#ctrlzone').show(); });

		var token = '@Html.Raw(ConfigurationManager.AppSettings["vkToken"])';
		mainModule.value('vk_id', '@Html.Raw(ViewBag.ID)');

		mainModule.controller('treeController', function ($scope, $timeout, vkService, show, vk_id) {
			$scope.bigdata = [];

			/* Загружает список постов по ID пользователя */
			/* FRIENDS */
			$scope.friends = [];
			$scope.getFriends = function (id) {
				if (!_.isEmpty(id)) {
					vkService.friendsGet(id, 'last_name').then(function (r) {
						$scope.friends = angular.copy(r);
						localforage.setItem('users', angular.copy(r));
					});
				}
			};

			/* INIT */
			$scope.getFriends(vk_id);

			var callTimer = 0;
			$scope.testGraph = function () {
				var friends = _.map($scope.friends, function (r) { return { uid: r.uid, name: r.last_name + ' ' + r.first_name }; });
				_.each(friends, function (f) {
					callTimer += 1000;
					$timeout(function () {
						vkService.friendsGet(f.uid, 'last_name').then(function (r) {
							if (typeof r != 'undefined' && r.length != 0) {
								$scope.bigdata.push({ uid: f.uid, name: f.name, friends: r });
								localforage.setItem(f.uid, r, function () { console.count('user'); });
							}
						});
					}, callTimer);
				});
			};

			$scope.createGraph = function () {
				var data = $scope.bigdata;
				var idArray = [];
				var ownerId = vk_id;
				var counter = 0;
				for (var i = 0; i < data.length; i++) {
					for (var j = counter; j < data.length; j++) {
						if (i !== j) {
							var current = _.compact(_.map(data[i].friends, function (f) {
								if (f.uid !== ownerId) return f.uid;
							}));
							var next = _.compact(_.map(data[j].friends, function (f) {
								if (f.uid !== ownerId) return f.uid;
							}));
							var d = _.filter(_.intersection(current, next), function (r) {
								if (r.uid !== ownerId) return r;
							});

							if (typeof d != 'undefined' && d.length != 0) {
								_.each(d, function (e) { idArray.push(e); });
							}
						}
					}
					counter++;
				}
				idArray = _.uniq(idArray);
				_.each(data, function (e) {
					e.friends = _.compact(_.map(e.friends, function (f) { if (_.contains(idArray, f.uid)) return f; }));
				});

				graph.init(vk_id, data, 20, 4);
			};
		});
	</script>
}