@{
	ViewBag.Title = "VivaGraph for MindMap";
}

@section header
{
	<link href="~/Content/codemirror.css" rel="stylesheet" />
	<link href="~/Content/mdn-like.css" rel="stylesheet" />
	<style>
		li {
			padding-left: 10px;
		}

		.CodeMirror {
			height: 580px;
		}
	</style>
}

<div ng-app="app.mind-map" ng-controller="ctrl.mind-map">
	<div class="row" style="font-size: 16px;">
		<div class="col-md-4">
			<div id="CodeMirror"></div>
		</div>
		<div class="col-md-8">
			<div id="graphContainer"></div>
		</div>
	</div>
</div>

@section scripts
{
	<script src="~/Scripts/codemirror.js"></script>
	<script src="~/Scripts/vivagraph/vivagraph.min.js"></script>
	<script>
		'use strict';

		var DEFAULT_VALUE = "Winter\n\tDecember\n\tJanuary\n\tFebruary" +
			"\nSpring\n\tMarch\n\tApril\n\tMay" +
			"\nSummer\n\tJune\n\tJuly\n\tAugust" +
			"\nAutumn\n\tSeptember\n\tOctober\n\tNovember";

		(function (ng) {

			var tEditor = CodeMirror(document.getElementById('CodeMirror'), {
				indentWithTabs: true,
				lineNumbers: true,
				theme: 'mdn-like',
				value: DEFAULT_VALUE
			});
			var graph = Viva.Graph.graph();
			var graphics = Viva.Graph.View.svgGraphics();
			var getColor = d3.scale.category20();

			var app = ng.module('app.mind-map', ['ui.bootstrap']);
			app.controller('ctrl.mind-map', ['$scope', function ($scope) {
				var that = this;

				// OPTIONS ---------------------------------------
				$scope.currentNodeName = 'value';
				$scope.nodeNames = [
					{ value: 'number', name: 'string number' },
					{ value: 'value', name: 'value of node' },
				];
				
				$scope.currentNodeColor = 'parent';
				$scope.nodeColors = [
					{ value: 'parent', name: 'by parent' },
					{ value: 'level', name: 'by level' },
				];

				// GRAPH config ---------------------------------------
				that.configGraphics = function (name, color) {
					graphics.node(function (node) {
						var group = Viva.Graph.svg('g');

						var text = Viva.Graph.svg('text')
							.attr('x', '-5px')
							.attr('y', '-13px')
							.text(node.data[name]);

						group.append(text);

						var elm = Viva.Graph.svg('circle')
							.attr('fill', getColor(node.data[color]))
							.attr('r', 10);

						group.append(elm);

						return group;
					})
						.placeNode(function (nodeUi, pos) {
							nodeUi.attr('transform', 'translate(' + pos.x + ',' + pos.y + ')');
						});
				};

				// GRAPH -----------------------------------------
				$scope.start = function () {
					that.configGraphics($scope.currentNodeName, $scope.currentNodeColor);
					graph.clear();

					var counter = 1;
					var array = tEditor.getValue().split('\n');
					var tempData = _.compact(_.map(array, function (el) {
						if ($.trim(el)) {
							counter++;
							return {
								value: el,
								id: counter,
								childs: [],
								level: that.getOffset(el) + 1
							};
						}
					}));

					var data = [{
						value: 'root',
						id: 1,
						parent: 0,
						childs: [],
					}];
					_.each(tempData, function (e) {
						data.push({
							value: e.value,
							id: e.id,
							level: e.level,
							parent: that.searchParent(tempData, e),
							childs: [],
						});
					});

					var graphData = [];
					_.each(data, function (e) {
						if (e.parent == 0) {
							graphData.push(e);
						} else {
							that.createHierarchy(graphData, e);
						}
					});

					that.buildGraph(graphData);
				};

				that.getOffset = function (obj) {
					return obj.match(/^\s{0,9}/)[0].length;
				};

				that.buildGraph = function (data) {
					var root = data[0];
					that.addToGraph(root);
					that.renderGraph();
				};

				that.searchParent = function (data, newNode) {
					var id = newNode.id - 2;
					for (var i = id; i >= 0; i--) {
						var elm = data[i];
						if (elm.level < newNode.level) {
							return elm.id;
						}
					}
					return 1;
				};

				that.createHierarchy = function (array, node) {
					_.each(array, function (e) {
						if (e.id === node.parent) {
							e.childs.push(node);
							return;
						} else {
							if (e.childs.length) {
								that.createHierarchy(e.childs, node);
							}
						}
					});
				};

				that.addToGraph = function (node) {
					graph.addNode(node.id, { value: node.value, parent: node.parent, level: node.level, number: node.id - 1 });
					_.each(node.childs, function (e) {
						graph.addNode(e.id, { value: e.value, parent: e.parent, level: e.level, number: e.id - 1 });
						graph.addLink(node.id, e.id);
						if (e.childs.length) {
							that.addToGraph(e);
						}
					});
				};

				that.renderGraph = function () {
					$('#placeHolder').remove();
					$("#graphContainer").append("<div style='width: 100%; height: 680px; background-color: rgba(51,51,51,0.4);' id='placeHolder'></div>");

					var renderer = Viva.Graph.View.renderer(graph, {
						container: document.getElementById('placeHolder'),
						graphics: graphics
					});

					renderer.run();
				};

				// call method after 2 second, when user end type
				var filterThrottled = _.debounce($scope.start, 2000);
				tEditor.on('change', filterThrottled);

				$scope.start();
			}]);

		})(angular);
	</script>
}