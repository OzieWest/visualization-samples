@{
	ViewBag.Title = "VivaGraph for MindMap";
}

@section header
{
	<link href="~/Content/codemirror.css" rel="stylesheet" />
	<link href="~/Content/mdn-like.css" rel="stylesheet" />
	<style>
		li {
			padding-left: 10px;
		}

		.CodeMirror {
			height: 600px;
		}
	</style>
}

<div ng-app="app.mind-map" ng-controller="ctrl.mind-map">
	<div class="row" style="font-size: 16px;">
		<div class="col-md-4">
			<div id="CodeMirror"></div>
		</div>
		<div class="col-md-8">
			<div id="graphContainer"></div>
		</div>
	</div>
</div>

@section scripts
{
	<script src="~/Scripts/codemirror.js"></script>
	<script src="~/Scripts/vivagraph/vivagraph.min.js"></script>
	<script>
		'use strict';

		var DEFAULT_VALUE = "Winter\n\tDecember\n\tJanuary\n\tFebruary" +
			"\nSpring\n\tMarch\n\tApril\n\tMay" +
			"\nSummer\n\tJune\n\tJuly\n\tAugust" +
			"\nAutumn\n\tSeptember\n\tOctober\n\tNovember";

		var myValue = '';

		; (function (ng) {
			
			var getColor = d3.scale.category20();

			var tEditor = CodeMirror(document.getElementById('CodeMirror'), {
				indentWithTabs: true,
				lineNumbers: true,
				theme: 'mdn-like',
				value: DEFAULT_VALUE
			});

			var a = 1; // TODO delete

			var graphics = Viva.Graph.View.svgGraphics();
			graphics.node(function (node) {
				var group = Viva.Graph.svg('g');
				
				var text = Viva.Graph.svg('text')
								.attr('x', '-5px')
								.attr('y', '-13px')
								.text(node.id - 1);
				group.append(text);

				var elm = Viva.Graph.svg('circle')
					.attr('fill', getColor(node.data.parent))
					.attr('r', 10);
				group.append(elm);

				return group;
			})
				.placeNode(function (nodeUi, pos) {
					//if(a) {
					//	myValue = nodeUi;
					//	a = 0;
					//	nodeUi.children[0].attr('x', pos.x).attr('y', pos.y);
					//}
					////nodeUi.attr('x', pos.x).attr('y', pos.y);
					//nodeUi.attr('cx', pos.x).attr('cy', pos.y);
					
					nodeUi.attr('transform',
						   'translate(' +
								 (pos.x) + ',' + (pos.y) +
						   ')');
				});

			var app = ng.module('app.mind-map', []);
			app.controller('ctrl.mind-map', ['$scope', function($scope) {
				var graph = Viva.Graph.graph();
				var that = this;

				that.start = function() {
					graph.clear();

					var counter = 1;
					var array = tEditor.getValue().split('\n');
					var tempData = _.compact(_.map(array, function(el) {
						if ($.trim(el)) {
							counter++;
							return {
								value: el,
								id: counter,
								childs: [],
								level: that.getOffset(el) + 1
							};
						}
					}));

					var data = [{
						value: 'root',
						id: 1,
						parent: 0,
						childs: [],
					}];
					_.each(tempData, function(e) {
						data.push({
							value: e.value,
							id: e.id,
							parent: that.searchParent(tempData, e),
							childs: [],
						});
					});

					var graphData = [];
					_.each(data, function(e) {
						if (e.parent == 0) {
							graphData.push(e);
						} else {
							that.createHierarchy(graphData, e);
						}
					});

					that.buildGraph(graphData);
				};

				that.getOffset = function(obj) {
					return obj.match(/^\s{0,9}/)[0].length;
				};

				that.buildGraph = function(data) {
					var root = data[0];
					that.addToGraph(root);
					that.renderGraph();
				};

				that.searchParent = function(data, newNode) {
					var id = newNode.id - 2;
					for (var i = id; i >= 0; i--) {
						var elm = data[i];
						if (elm.level < newNode.level) {
							return elm.id;
						}
					}
					return 1;
				};

				that.createHierarchy = function(array, node) {
					_.each(array, function(e) {
						if (e.id === node.parent) {
							e.childs.push(node);
							return;
						} else {
							if (e.childs.length) {
								that.createHierarchy(e.childs, node);
							}
						}
					});
				};

				that.addToGraph = function(node) {
					graph.addNode(node.id, { value: node.value });
					_.each(node.childs, function(e) {
						graph.addNode(e.id, { value: e.value, parent: e.parent });
						graph.addLink(node.id, e.id);
						if (e.childs.length) {
							that.addToGraph(e);
						}
					});
				};

				that.renderGraph = function() {
					$('#placeHolder').remove();
					$("#graphContainer").append("<div style='width: 100%; height: 600px; background-color: rgba(51,51,51,0.4);' id='placeHolder'></div>");

					var renderer = Viva.Graph.View.renderer(graph, {
						container: document.getElementById('placeHolder'),
						graphics: graphics
					});

					renderer.run();
				};
				
				// call method after 2 second, when user end type
				var filterThrottled = _.debounce(that.start, 2000);
				tEditor.on('change', filterThrottled);

				that.start();
			}]);

		})(angular);
	</script>
}