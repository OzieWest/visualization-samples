@{
	ViewBag.Title = "D3.js";
}

@section header
{
	<h2 class="page-title">Data-Driven Documents<small> is a JavaScript library for manipulating documents based on data.</small></h2>
}

<div ng-app="vis.module" ng-controller="treeController">
	<textarea style="width: 100%;" cols="3" rows=""
		ng-change="message.split()"
		ng-model="message.source"
		placeholder="example: help me hennry with haskel"></textarea>

	<div class="alert alert-info">
		<span class="label label-info">Length: {{ message.words.length }}</span>
		<span style="margin-left: 5px;" class="label" ng-repeat="word in message.words track by $index">{{ word }}</span>
	</div>

	<div class="svg"></div>
</div>

@section scripts
{
	<script type="text/javascript">
		mainModule.value('dead', d3);

		mainModule.controller('treeController', function ($scope, dead) {
			$scope.message = {
				source: 'Data Driven Documents is a JavaScript library for manipulating documents based on data',
				words: [],
				split: function splitSource() {
					var message = $scope.message.source.toLowerCase();
					message = message.replace(/[^A-Za-zА-Яа-яё\s]+/g, "").replace(/\s+/, " ");
					$scope.message.words = message.split(' ');
					$scope.rebuildTree();
					$scope.svgTree($scope.root);
				}
			};

			// ANG -----------------------------
			var currentNode = {};

			$scope.rebuildTree = function () {
				$scope.root = $scope.createNode('root');
				if ($scope.message.source) {
					for (var i = 0; i < $scope.message.words.length; i++) {
						var word = $scope.message.words[i];
						for (var j = 0; j < word.length; j++) {
							if (j == 0) currentNode = $scope.root;
							var letter = word[j];
							$scope.checkNode(letter);
						}
					}
				}
			};

			$scope.checkNode = function (letter) {
				for (var i = 0; i < currentNode.children.length; i++) {
					var node = currentNode.children[i];
					if (letter == node.name) {
						node.value += 1;
						currentNode = node;
						return;
					}
				}

				var newNode = $scope.createNode(letter);
				currentNode.children.push(newNode);
				currentNode = newNode;
			};

			$scope.createNode = function (name) {
				var node = {
					name: name,
					value: 1,
					type: 'black',
					level: 'red',
					children: []
				};
				return node;
			};

			$(document).ready(function () {
				$scope.message.split();
			});

			// SVG -----------------------------
			var margin, width, height, tree, diagonal, svg;

			margin = { top: 20, right: 120, bottom: 20, left: 120 },
			width = 900 - margin.right - margin.left,
			height = 600 - margin.top - margin.bottom;

			function nodeSize(param) { return param * 4; };

			$scope.svgTree = function (root) {
				dead.select("svg").remove(); // очистка дерева

				tree = dead.layout.tree().size([height, width]);

				svg = dead.selectAll("div.svg").append("svg")
					.attr("style", "width: 100%; height: 600px;")
					.append("g")
					.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

				diagonal = dead.svg.diagonal().projection(function (d) { return [d.y, d.x]; });

				var i = 0;

				var nodes = tree.nodes(root).reverse(),
					links = tree.links(nodes);

				nodes.forEach(function (d) { d.y = d.depth * 60; });

				var node = svg.selectAll("g.node")
					.data(nodes, function (d) { return d.id || (d.id = ++i); });

				var nodeEnter = node.enter().append("g")
					.attr("class", "node")
					.attr("transform", function (d) {
						return "translate(" + d.y + "," + d.x + ")";
					});

				nodeEnter.append("circle")
					.attr("r", function (d) {
						return nodeSize(d.value);
					})
					.style("fill", "#fff");

				nodeEnter
					.append("text")
					.attr("y", function (d) { return -1 * (nodeSize(d.value) + 10); })
					.attr("dy", ".40em")
					.attr("text-anchor", function (d) { return d.children || d._children ? "end" : "start"; })
					.text(function (d) { return d.name.toUpperCase(); })
					.style("fill-opacity", 1);

				var link = svg.selectAll("path.link")
					.data(links, function (d) { return d.target.id; });

				link.enter().insert("path", "g")
					.attr("class", "link")
					.attr("d", diagonal);
			};
		});
	</script>
}

